name: Deploy Dev Branch to Development Environment

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Validate and Deploy to Development
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install detection-rules dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .
        pip install lib/kibana
        pip install lib/kql
    
    - name: Set up configuration
      run: |
        # Create detection-rules config file
        cat > .detection-rules-cfg.json << EOF
        {
          "custom_rules_dir": "dac-demo"
        }
        EOF
    
    - name: Deploy to Development Kibana
      env:
        KIBANA_URL: ${{ secrets.ELASTIC_CLOUD_DEVELOPMENT_URL }}
        ES_URL: ${{ secrets.ELASTIC_CLOUD_DEVELOPMENT_ES_URL }}
        ES_PASSWORD: ${{ secrets.ELASTIC_CLOUD_DEVELOPMENT_PASSWORD }}
      run: |
        if [ -d "dac-demo/rules" ] && [ "$(ls -A dac-demo/rules)" ]; then
          echo "Deploying custom rules to Development environment..."
          
          # Update detection-rules config file with direct URLs (NOT cloud_id to avoid vanity URL issue)
          cat > .detection-rules-cfg.json << EOF
        {
          "kibana_url": "${KIBANA_URL}",
          "elasticsearch_url": "${ES_URL}",
          "kibana_username": "elastic",
          "kibana_password": "${ES_PASSWORD}",
          "custom_rules_dir": "dac-demo"
        }
        EOF
          
          # Import rules to Development Kibana
          python -m detection_rules kibana --space default import-rules \
            -d dac-demo/rules/ || echo "Note: Some rules may already exist"
          
          echo "✅ Development deployment completed successfully!"
        else
          echo "No custom rules found in dac-demo/rules/"
          echo "⚠️ Nothing to deploy"
        fi
    
    - name: Create deployment summary
      if: always()
      run: |
        echo "## 🚀 Development Environment Deployment" >> $$GITHUB_STEP_SUMMARY
        echo "" >> $$GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "### ✅ Deployment Successful" >> $$GITHUB_STEP_SUMMARY
          echo "" >> $$GITHUB_STEP_SUMMARY
          echo "Custom detection rules have been deployed to the Development environment." >> $$GITHUB_STEP_SUMMARY
          echo "" >> $$GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $$GITHUB_STEP_SUMMARY
          echo "1. Test the rules in the Development environment" >> $$GITHUB_STEP_SUMMARY
          echo "2. Once validated, create a PR from \`dev\` to \`main\` for Production deployment" >> $$GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Deployment Failed" >> $$GITHUB_STEP_SUMMARY
          echo "" >> $$GITHUB_STEP_SUMMARY
          echo "The deployment to Development has failed. Please review the logs above." >> $$GITHUB_STEP_SUMMARY
        fi
