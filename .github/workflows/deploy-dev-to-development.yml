name: Deploy Dev Branch to Development Environment

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Validate and Deploy to Development
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install toml pyyaml
    
    - name: Deploy to Development Kibana
      env:
        KIBANA_URL: ${{ secrets.ELASTIC_CLOUD_DEVELOPMENT_URL }}
        ES_URL: ${{ secrets.ELASTIC_CLOUD_DEVELOPMENT_ES_URL }}
        ES_PASSWORD: ${{ secrets.ELASTIC_CLOUD_DEVELOPMENT_PASSWORD }}
      run: |
        if [ -d "dac-demo/rules" ] && [ "$(ls -A dac-demo/rules)" ]; then
          echo "Deploying custom rules to Development environment..."
          
          # First check if detection engine is initialized
          echo "Checking detection engine status..."
          DETECTION_ENGINE_STATUS=$(curl -s -u elastic:${ES_PASSWORD} \
            "${KIBANA_URL}/api/detection_engine/index" \
            -H "Content-Type: application/json" | python -c "import sys, json; data=json.load(sys.stdin); print('initialized' if 'name' in data else 'not_initialized')")
          
          if [ "$DETECTION_ENGINE_STATUS" != "initialized" ]; then
            echo "Initializing detection engine..."
            curl -s -u elastic:${ES_PASSWORD} \
              -X POST "${KIBANA_URL}/api/detection_engine/index" \
              -H "kbn-xsrf: true" \
              -H "Content-Type: application/json"
            sleep 5
          fi
          
          # Convert TOML rules to NDJSON and deploy via curl
          echo "Converting and deploying rules..."
          
          for rule_file in dac-demo/rules/*.toml; do
            if [ -f "$rule_file" ]; then
              echo "Processing $rule_file..."
              
              # Convert TOML to NDJSON using Python
              python3 << 'PYTHON_SCRIPT' "$rule_file" > /tmp/rule.ndjson
import sys
import toml
import json
import uuid

# Read TOML file
with open(sys.argv[1], 'r') as f:
    rule_data = toml.load(f)

# Extract rule section
rule = rule_data.get('rule', {})

# Create NDJSON format
ndjson_rule = {
    'id': str(uuid.uuid4()),
    'rule_id': rule.get('rule_id', f"imported-{uuid.uuid4().hex[:8]}"),
    'name': rule.get('name', 'Imported Rule'),
    'description': rule.get('description', ''),
    'risk_score': rule.get('risk_score', 21),
    'severity': rule.get('severity', 'low'),
    'type': rule.get('type', 'query'),
    'query': rule.get('query', ''),
    'language': rule.get('language', 'kuery'),
    'author': rule.get('author', []),
    'from': rule.get('from', 'now-6m'),
    'index': rule.get('index', ['logs-*']),
    'interval': rule.get('interval', '5m'),
    'max_signals': rule.get('max_signals', 100),
    'enabled': rule.get('enabled', False),
    'false_positives': rule.get('false_positives', []),
    'references': rule.get('references', []),
    'tags': rule.get('tags', []),
    'threat': rule.get('threat', [])
}

# Output as NDJSON
print(json.dumps(ndjson_rule))
PYTHON_SCRIPT
              
              # Deploy the rule via curl
              echo "Deploying rule to Development Kibana..."
              RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -u elastic:${ES_PASSWORD} \
                -X POST "${KIBANA_URL}/api/detection_engine/rules/_import?overwrite=true" \
                -H "kbn-xsrf: true" \
                -H "Content-Type: multipart/form-data" \
                -F "file=@/tmp/rule.ndjson")
              
              HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d':' -f2)
              BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS/d')
              
              if [ "$HTTP_STATUS" = "200" ]; then
                echo "✅ Successfully deployed rule from $rule_file"
                echo "$BODY" | python -m json.tool 2>/dev/null || echo "$BODY"
              else
                echo "❌ Failed to deploy rule from $rule_file (HTTP $HTTP_STATUS)"
                echo "$BODY" | python -m json.tool 2>/dev/null || echo "$BODY"
              fi
              
              rm -f /tmp/rule.ndjson
            fi
          done
          
          echo "✅ Development deployment completed!"
        else
          echo "No custom rules found in dac-demo/rules/"
          echo "⚠️ Nothing to deploy"
        fi
    
    - name: Create deployment summary
      if: always()
      run: |
        echo "## 🚀 Development Environment Deployment" >> $$GITHUB_STEP_SUMMARY
        echo "" >> $$GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "### ✅ Deployment Successful" >> $$GITHUB_STEP_SUMMARY
          echo "" >> $$GITHUB_STEP_SUMMARY
          echo "Custom detection rules have been deployed to the Development environment." >> $$GITHUB_STEP_SUMMARY
          echo "" >> $$GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $$GITHUB_STEP_SUMMARY
          echo "1. Test the rules in the Development environment" >> $$GITHUB_STEP_SUMMARY
          echo "2. Once validated, create a PR from \`dev\` to \`main\` for Production deployment" >> $$GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Deployment Failed" >> $$GITHUB_STEP_SUMMARY
          echo "" >> $$GITHUB_STEP_SUMMARY
          echo "The deployment to Development has failed. Please review the logs above." >> $$GITHUB_STEP_SUMMARY
        fi
